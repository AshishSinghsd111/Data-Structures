// this is a gfg daily problem for 7th may
// this solution is only for knowledge purpose.
Given a binary tree of size n, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 
3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1
Example 2:

Input :
       10
      /  \
     20   30
    / \ 
   40  60

Output: 
40 60 20 30 10
Explanation:
Traversing level 2 : 40 60
Traversing level 1 : 20 30
Traversing level 0 : 10
Your Task: 
You don't need to read input or print anything. Complete the function reverseLevelOrder() which takes the root of the tree as input parameter and returns a list containing the reverse level order traversal of the given tree.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ n ≤ 104

---->>java solution
code logic:-
1.we use bfs or level order traversal as in the problem it's mentioned level order traversal.
2.we use arraylist for storing the elements of every level and then reverse it to get the answer.

Note:- in some solution it's mentioned offer in place of add.
add(element): Adds an element to the rear of the queue. If the queue is full, it throws an exception.
offer(element): Adds an element to the rear of the queue. If the queue is full, it returns false.


class Tree
{
    public ArrayList<Integer> reverseLevelOrder(Node node) 
    {
        // code here
        
        Queue<Node> q=new LinkedList<Node>();
        ArrayList<Integer> res=new ArrayList<Integer>();
        q.add(node);
        while(q.isEmpty()==false)
        {
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                Node curr=q.remove();
                res.add(curr.data);
                if(curr.right!=null)
                  q.add(curr.right);
                if(curr.left!=null)
                  q.add(curr.left);
            }
        }
        Collections.reverse(res);
        return res;
    }
}  










