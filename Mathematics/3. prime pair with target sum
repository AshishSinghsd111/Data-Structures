//this is a gfg potd for 16th june 2024
//
Given a number n, find out if n can be expressed as a+b, where both a and b are prime numbers. If such a pair exists, return the values of a and b, otherwise return [-1,-1] as an array of size 2.
Note: If [a, b] is one solution with a <= b, and [c, d] is another solution with c <= d, and a < c then  [a, b] is considered as our answer.

Examples

Input: n = 10
Output: 3 7
Explanation: There are two possiblities 3, 7 & 5, 5 are both prime & their sum is 10, but we'll pick 3, 7 as 3 < 5.
Input: n = 3
Output: -1 -1
Explanation: There are no solutions to the number 3.
Expected Time Complexity: O(n*loglog(n))
Expected Auxiliary Space: O(n)

Constraints:
2 <= n <= 106

--->>  java solution



class Solution {
   public static ArrayList<Integer> getPrimes(int n) {
        // code here
         ArrayList<Integer> arr=new ArrayList<>();
        boolean [] isPrime=new boolean[n/2];
        Arrays.fill(isPrime,false);
        for(int i=3;i*i<n;i+=2){
            if(!isPrime[i/2]){
                for(int j=i*i;j<n;j+=i*2){
                    isPrime[j/2]=true;
                }
            }
        }
        arr.add(2);
        for(int i=3;i<n;i+=2){
            if(!isPrime[i/2]){
                arr.add(i);
            }
        }
        ArrayList<Integer> ans=new ArrayList<>();
        int i=0,j=arr.size()-1;
        while(i<=j){
            int sum=arr.get(i)+arr.get(j);
            if(sum==n){
                ans.add(arr.get(i));
                ans.add(arr.get(j));
                break;
            }else if(sum<n){
                i++;
            }else{
                j--;
            }
        }
        if(ans.size()==0){
            ans.add(-1);
             ans.add(-1);
        }
        return ans;
    }
}
