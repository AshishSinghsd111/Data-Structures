//this is a gfg potd for 25th september 2024.
//difficulty - medium
Given a singly linked list of integers. The task is to check if the given linked list is palindrome or not.

Examples:

Input: LinkedList: 1->2->1->1->2->1
Output: true
Explanation: The given linked list is 1->2->1->1->2->1 , which is a palindrome and Hence, the output is true.

Input: LinkedList: 1->2->3->4
Output: false
Explanation: The given linked list is 1->2->3->4, which is not a palindrome and Hence, the output is false.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1) 
Note: You should not use the recursive stack space as well

Constraints:
1 <= number of nodes <= 105
1 ≤ node->data ≤ 103

-->> java solution

class Solution {
    // Function to check whether the list is palindrome.
    boolean isPalindrome(Node head) {
        // Your code here
        if (head == null || head.next == null) {
            return true; // Empty or single element list is a palindrome
        }
        
        Stack<Integer> stack = new Stack<>();
        Node slow = head, fast = head;
        
        // Push first half of elements onto the stack
        while (fast != null && fast.next != null) {
            stack.push(slow.data);
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // If the list has an odd number of elements, skip the middle one
        if (fast != null) {
            slow = slow.next;
        }
        
        // Compare second half of the list with elements popped from the stack
        while (slow != null) {
            if (slow.data != stack.pop()) {
                return false;  // Mismatch found, not a palindrome
            }
            slow = slow.next;
        }
        
        return true;  // All elements matched, it's a palindrome
    }
}
