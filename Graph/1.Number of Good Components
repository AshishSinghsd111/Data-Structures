//this is a geeks for geeks problem of the day for 13th may.
//
Given an undirected graph with v vertices(numbered from 1 to v) and e edges. Find the number of good components in the graph.
A component of the graph is good if and only if the component is fully connected.
Note: A fully connected component is a subgraph of a given graph such that there's an edge between every pair of vertices in the component, the given graph can be a disconnected graph. 

Example 1:

Input: 


e=3 
v=3
edges={{1, 2},{1, 3},{3, 2}}
Output: 
1
Explanation: 
We can see that there is only one component in the graph and in this component there is a edge between any two vertces.
Example 2:

Input:

e=5 
v=7
edges={{1, 2},{7, 2},{3, 5},{3, 4},{4, 5}}
Output: 
2
Explanation: 
We can see that there are 3 components in the graph. For 1-2-7 there is no edge between 1 to 7, so it is not a fully connected component. Rest 2 are individually fully connected component.
Your Task:
You don't need to read input or print anything. Your task is to complete the function findNumberOfGoodComponent(), which takes an integer e and v and edges[][] as input parameters and returns an integer denoting the number of good components.

Expected Time Complexity: O(v+e)
Expected Auxiliary Space: O(depth of the graph)

Constraints:
1 ≤ v, e ≤ 104


---->>>java solution


class Solution {

private void dfs(int v, int[] vertices, int[] edges, ArrayList<ArrayList<Integer>> adj, int[] visited) {

visited[v] = 1;

vertices[0]++;

 edges[0] += adj.get(v).size();

for (int to : adj.get(v)) {

if (visited[to] == 0) {

dfs(to, vertices, edges, adj, visited);

}

}

}

public int findNumberOfGoodComponent(int e, int v, int[][] edges) { ArrayList<ArrayList<Integer>> adj = new ArrayList<>(v + 1);

for (int i = 0; i <= v; i++) {

adj.add(new ArrayList<Integer>());

}

 for (int[] edge : edges) {

adj.get(edge[0]).add(edge[1]);

adj.get(edge[1]).add(edge[0]);

}

int ans = 0;

int[] visited = new int[v + 1];

for (int i = 1; i <= v; i++) {

if (visited[i] == 0) {

int[] vertices = { 0 };

int[] edgeCount = { 0 };

dfs(i, vertices, edgeCount, adj, visited);

 edgeCount[0] /= 2;

if (edgeCount[0] == (vertices[0] * (vertices[0] - 1)) / 2)

ans++;

}

}

return ans;

}

} 
