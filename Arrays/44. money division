Given an array where each element is the money a person have and there is only Rs. 3 note. We need to check whether it is possible to divide the money equally among all the persons or not. If it is possible then find Minimum number of transactions needed.
 

Example 1:

Input: nums = [5, 8, 11]
Output: 1
Explanation: 3rd person can give Rs. 3
then all person would have Rs. 8
Example 2:

Input: nums = [1, 2, 3, 4]
Output: -1
Explanation: 1 + 2 + 3 + 4 = 10. Rs. 10 
can not be distributed among 4 persons.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function MinimumTransaction() which takes the array as input parameter and returns the minimum number of transactions needed to distribute the money equally. If not possible returns -1.
 

Expected Time Complexity: O(n) where n is length of array
Expected Space Complexity: O(1)
 

Constraints:
1 <= n <= 105
1 <= elements of array <= 106

-->> java solution


class Solution
{
    public int MinimumTransaction(int[] nums)
    {
        // code here
        int n=nums.length,sum=0,res=0;
        for(int i=0;i<n;i++)
          sum+=nums[i];
        if(sum%n!=0) //this case checks whether we can divide the money equally or not.
          return -1;
         int target=sum/n;  //this will give us the the money each user will get 
        for(int i: nums)
          {
             int diff=target-i; //check the difference from target 
             if(diff%3 !=0)    //this will check diff is divisible by 3 or not as we have given only 3 rupees note.
               return -1;
               
            res+=Math.abs(diff)/3;
          }
          
          return res/2;  //to remove dulicates as we have counted each transaction twice.
    }
}
