//this is a gfg potd for 25th november 2024.

Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr.

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.
Input: arr[] = [-1, -3, -10, 0, 60]
Output: 60
Explanation: The subarray with maximum product is {60}.
Input: arr[] = [2, 3, 4] 
Output: 24 
Explanation: For an array with all positive elements, the result is product of all elements. 
Constraints:
1 ≤ arr.size() ≤ 106
-10  ≤  arr[i]  ≤  10

-->>java solution


class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        // code here
        int n=arr.length;
        int res=Integer.MIN_VALUE;
        //int res2=Integer.MIN_VALUE;
        int left_sum=1;
        int right_sum=1;
        
        for(int i=0;i<n;i++)
    {
        if(left_sum==0)
          left_sum=1;
        if(right_sum==0)
          right_sum=1;
        left_sum=left_sum*arr[i];
        int j=n-i-1;
        right_sum=right_sum*arr[j];
        
        res=Math.max(res,Math.max(left_sum,right_sum));
         
    }     
         
        return res; 
    }
}
