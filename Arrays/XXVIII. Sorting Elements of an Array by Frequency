//THIS IS A GFG POTD FOR 28TH AUG 2024.
//DIFFICULTY MEDIUM
Given an array of integers arr, sort the array according to the frequency of elements, i.e. elements that have higher frequency comes first. If the frequencies of two elements are the same, then the smaller number comes first.

Examples :

Input: arr[] = [5, 5, 4, 6, 4]
Output: [4, 4, 5, 5, 6]
Explanation: The highest frequency here is 2. Both 5 and 4 have that frequency. Now since the frequencies are the same the smaller element comes first. So 4 4 comes first then comes 5 5. Finally comes 6. The output is 4 4 5 5 6.
Input: arr[] = [9, 9, 9, 2, 5]
Output: [9, 9, 9, 2, 5]
Explanation: The highest frequency here is 3. Element 9 has the highest frequency So 9 9 9 comes first. Now both 2 and 5 have the same frequency. So we print smaller elements first. The output is 9 9 9 2 5.
Expected Time Complexity: O(n*logn)
Expected Space Complexity: O(n)

Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i]≤ 105

-->> JAVA SOLUTION

class Solution {
    /**
     * This method finds the first element in the array that has a smaller element on its left and a larger element on its right.
     * It returns a list containing the left smaller element, the element itself, and the right larger element.
     *
     * @param arr the input array of integers
     * @return a list of integers containing the left smaller element, the element itself, and the right larger element
     */
    public List<Integer> find3Numbers(int[] arr) {
        List<Integer> ans = new ArrayList<>();
        int n = arr.length;
        int[] lr = new int[n]; // Array to store the left smaller elements
        int[] rl = new int[n]; // Array to store the right larger elements
        
        // Initialize the left smaller array
        lr[0] = -1;
        int min = arr[0];
        for (int i = 1; i < n; i++) {
            min = Math.min(min, arr[i]);
            if (min < arr[i]) {
                lr[i] = min;
            } else {
                lr[i] = -1;
            }
        }
        
        // Initialize the right larger array
        rl[n - 1] = -1;
        int max = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max = Math.max(max, arr[i]);
            if (max > arr[i]) {
                rl[i] = max;
            } else {
                rl[i] = -1;
            }
        }
        
        // Find the first element with a smaller left and larger right
        for (int i = 1; i < n - 1; i++) {
            if (lr[i] != -1 && rl[i] != -1) {
                ans.add(lr[i]);
                ans.add(arr[i]);
                ans.add(rl[i]);
                break;
            }
        }
        
        return ans;
    }
}
