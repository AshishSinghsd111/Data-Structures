//this is a gfg potd for 20th november 2024.
You are given an array of integer arr[] where each number represents a vote to a candidate. Return the candidates that have votes greater than one-third of the total votes, If there's not a majority vote, return an empty array. 

Note: The answer should be returned in an increasing format.

Examples:

Input: arr[] = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output: [5, 6]
Explanation: 5 and 6 occur more n/3 times.
Input: arr[] = [1, 2, 3, 4, 5]
Output: []
Explanation: no candidate occur more than n/3 times.
Constraint:
1 <= arr.size() <= 106
-109 <= arr[i] <= 109

-->> java solution


class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {
        // Your code goes here.
        int n=nums.length;
        List<Integer> ans=new ArrayList<>();
        HashMap<Integer,Integer> res = new HashMap();
        for(int i=0;i<n;i++)
        {
            res.put(nums[i],res.getOrDefault(nums[i],0)+1);
        }
        
        for(Map.Entry<Integer,Integer> var:res.entrySet())
        {
            if((var.getValue())>n/3)
              ans.add(var.getKey());
        }
        
        return ans;
        
    }
}
