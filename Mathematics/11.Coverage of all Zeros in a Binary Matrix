//this is a gfg potd for 26th june 2024
//
Given a binary matrix contains 0s and 1s only, we need to find the sum of coverage of all zeros of the matrix where coverage for a particular 0 is defined as a total number of ones around a zero in left, right, up and bottom directions.

Examples:

Input:
matrix = [[0, 1, 0],
          [0, 1, 1],
          [0, 0, 0]]
Output: 6
Explanation: There are a total of 6 coverage are there

Input: 
matrix = [[0, 1]]
Output: 1
Explanation: There are only 1 coverage.
Expected Time Complexity: O(n * m)
Expected Space Complexity: O(1)

Constraints:
1 <= matrix.size, matrix[0].size <= 100

->> java solution
class Solution {
    public int findCoverage(int[][] matrix) {
        // code here
        int result = 0;
        
        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[i].length; j++) {
                if(matrix[i][j] == 0) {
                    // Left
                    if(((j - 1) >= 0) && matrix[i][j - 1] == 1) {
                        result++;    
                    }
                    
                    // right
                    if(((j + 1) < matrix[i].length) && matrix[i][j + 1] == 1) {
                        result++;    
                    }
                    
                    // up
                    if((((i - 1) >= 0) && matrix[i - 1].length > j) && matrix[i - 1][j] == 1) {
                        result++;
                    }
                    
                    // down
                    if((((i + 1) < matrix.length) && matrix[i + 1].length > j) && matrix[i + 1][j] == 1) {
                        result++;
                    }
                }
            }
        }
        return result;
    }
}
