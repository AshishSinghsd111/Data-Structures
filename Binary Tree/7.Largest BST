//this is a gfg potd for 22nd july 2024
//
Given a binary tree. Find the size of its largest subtree which is a Binary Search Tree.
Note: Here Size equals the number of nodes in the subtree.

Examples :

Input:   1
        /  \
        4   4              
       / \ 
      6   8
Output: 1 
Explanation: There's no sub-tree with size greater than 1 which forms a BST. All the leaf Nodes are the BSTs with size equal to 1.

Input:    6
        /   \
      6      2              
       \    / \
        2  1   3
Output: 3
Explanation: The following sub-tree is a BST of size 3:  2
                                                       /   \
                                                      1     3
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(Height of the BST).

Constraints:
1 ≤ Number of nodes ≤ 105
1 ≤ Data of a node ≤ 106

->> java solution

class Info{
    int minVal;
    int maxVal;
    int size;
    
    Info(int mi , int ma , int s){
        minVal = mi;
        maxVal = ma;
        size = s;
    }
}

class Solution{
    // Return the size of the largest sub-tree which is also a BST
    static int largestBst(Node root)
    {
      return solve(root).size;
    }
    
    static Info solve(Node root){
        
        if(root == null) return new Info(Integer.MAX_VALUE , Integer.MIN_VALUE , 0);
        
        Info left = solve(root.left);
        Info right = solve(root.right);
        
        if(left.maxVal < root.data && root.data < right.minVal){
            return new Info(Math.min(root.data , left.minVal) , Math.max(root.data , right.maxVal) , left.size + right.size + 1);
        }
        
        return new Info(Integer.MIN_VALUE , Integer.MAX_VALUE , Math.max(left.size , right.size));
    
    }
    
}
