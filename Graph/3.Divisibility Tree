//this is a geeks for geeks problem of the day for 16th may 2024.
//
//level - medium
Given a tree with n nodes where n is even. The tree is numbered from 1 to n, has n - 1 edges and is rooted at node 1. Your task is to eliminate the maximum number of edges resulting in a set of disjoint trees where the number of nodes in each tree is divisible by 2.

Example 1:

Input: 
n = 10
edges = {{2,1},{3,1},{4,3},{5,2},{6,1},{7,2},{8,6},{9,8},{10,8}}
Output:
2
Explanation:
Original tree:

   
After removing edge 1-3 and 1-6, each remaining component consists of even number of nodes. 


Example 2:

Input: 
n = 4
edges = {{2,1},{4,2},{1,3}}
Output:
1
Explanation:
After removing 2-1, each remaining component consists of even number of nodes. 
Your Task:
You don't need to read or print anyhting. Your task is to complete the function minimumEdgeRemove() which takes n and edges as input parameters and returns the maximum number of edges that need to be removed from the given tree.

Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Constraints:
1 <= n <= 105
edges.length == n - 1
1 <= edges[i][0], edges[i][1] <= n

---->>>> java solution
class Solution {
    static int ans=0;
    int wrk(ArrayList<ArrayList<Integer>>al,  int vs[], int i){
        vs[i]=1;
        int sz=1;
        for(int s:al.get(i)){
            if(vs[s]==0){
                int t=wrk(al,vs,s);
                sz+=t;
                if(t%2==0)ans++;
            }
        }
        return sz;
    }
    public int minimumEdgeRemove(int n, int[][] edges) {
        // code here
        ans=0;
        ArrayList<ArrayList<Integer>> al= new ArrayList<>();
        for(int i=0;i<=n;i++){
            al.add(new ArrayList<>());
        }
        for(int i[]:edges){
            al.get(i[0]).add(i[1]);
            al.get(i[1]).add(i[0]);
        }
        int vs[]= new int[n+1];
        for(int i=1;i<vs.length;i++){
            if(vs[i]==0){
                wrk(al,vs,i);
            }
        }
        return ans;
    }
}

