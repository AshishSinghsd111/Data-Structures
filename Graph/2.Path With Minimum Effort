// this is geeks for geeks problem of the day for 14th may 2024
//

You are a hiker preparing for an upcoming hike. You are given heights[][], a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find the route with minimum effort.

Note: A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Example 1:

Input:
row = 3
columns = 3 
heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 
2
Explaination: 
The route 1->3->5->3->5 has a maximum absolute difference of 2 in consecutive cells. This is better than the route 1->2->2->2->5, where the maximum absolute difference is 3.
Example 2:

Input:
row = 2
columns = 2 
heights = [[7,7],[7,7]]
Output: 
0
Explaination: 
Any route from the top-left cell to the bottom-right cell has a maximum absolute difference of 0 in consecutive cells.
Your Task:
You don't need to read input or print anything. Your task is to complete the function MinimumEffort() which takes intergers rows, columns, and the 2D array heights[][]  and returns the minimum effort required to travel from the top-left cell to the bottom-right cell.

Expected Time Complexity: O(rowsxcolumns)
Expected Space Complexity: O(rowsxcolumns)

Constraints:
1 <= rows, columns <= 100
rows == heights.length
columns == heights[i].length
0 <= heights[i][j] <= 106

--->>> java solution

class Solution {
    
    static int result(int[][] heights)
    {
        int n=heights.length;
        int m=heights[0].length;
        int[][] distance=new int[n][m];
        for(int[] row :distance)
        {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        distance[0][0]=0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[0]-b[0]);
        pq.offer(new int[]{0,0,0});
        int[][] dir = {{-1,0},{0,-1},{1,0},{0,1}};
        while(!pq.isEmpty())
        {
            int[] top = pq.poll();
            int diff = top[0];
            int x=top[1];
            int y=top[2];
            for(int[] d:dir)
            {
                int nx = x+d[0];
                int ny=y+d[1];
                if(nx >=0 && nx<n &&ny>=0 && ny<m)
                {
                    int newdiff = Math.max(diff,Math.abs(heights[nx][ny] - heights[x][y]));
                    if(newdiff < distance[nx][ny])
                    {
                        distance[nx][ny] = newdiff;
                        pq.offer(new int[]{newdiff,nx,ny});
                    }
                }
            }
        }
        return distance[n-1][m-1];
    }
    
    public static int MinimumEffort(int rows, int columns, int[][] heights) {
        // code here
        return result(heights);
        
    }
}


