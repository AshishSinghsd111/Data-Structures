//this is a gfg potd for 15th september 2024.
//difficulty - medium
Given a Binary Tree (BT), convert it to a Doubly Linked List (DLL) in place. The left and right pointers in nodes will be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as the order of the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

Note: h is the tree's height, and this space is used implicitly for the recursion stack.

TreeToList

Examples:

Input:
      1
    /  \
   3    2
Output:
3 1 2 
2 1 3

Explanation: DLL would be 3<=>1<=>2
Input:
       10
      /   \
     20   30
   /   \
  40   60
Output:
40 20 60 10 30 
30 10 60 20 40

Explanation:  DLL would be 40<=>20<=>60<=>10<=>30.
Expected Time Complexity: O(no. of nodes)
Expected Space Complexity: O(height of the tree)

Constraints:
1 ≤ Number of nodes ≤ 105
0 ≤ Data of a node ≤ 105

-->> java solution


//This function should return head to the DLL
class Solution {
    // Function to convert binary tree to doubly linked list and return it.
    Node bToDLL(Node root) {
        // Collecting the in-order traversal of the binary tree
        ArrayList<Integer> list = inorder(root);
        Node cur = new Node(list.get(0)); // Create the head of the DLL
        Node prev = cur; // Keep track of the previous node

        // Iterate through the collected values to create the DLL
        for (int i = 1; i < list.size(); i++) {
            Node newNode = new Node(list.get(i)); // Create a new node for the DLL
            prev.right = newNode; // Link the previous node's right to the new node
            newNode.left = prev; // Link the new node's left to the previous node
            prev = newNode; // Move the previous pointer to the new node
        }

        return cur; // Return the head of the doubly linked list
    }

    // Helper function to perform in-order traversal
    ArrayList<Integer> inorder(Node root) {
        ArrayList<Integer> list = new ArrayList<>();
        if (root == null) return list; // Base case for recursion

        // Traverse the left subtree, visit the root, and then the right subtree
        list.addAll(inorder(root.left));
        list.add(root.data);
        list.addAll(inorder(root.right));

        return list; // Return the collected values
    }
}
