// this is agfg potd for 4th june 2024
//
Given a binary representation in the form of a string(s) of a number n, the task is to find a binary representation of n+1.

Note: Output binary string should not contain leading zeros.

Example 1:

Input: s = "10"
Output: 11
Explanation: "10" is the binary representation of 2 and binary representation of 3 is "11"
Example 2:

Input: s = "111"
Output: 1000
Explanation: "111" is the binary representation of 7 and binary representation of 8 is "1000"
Your Task:  
You don't need to read input or print anything. Complete the function binaryNextNumber()which takes s as input parameter and returns the string.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n) to store resultant string  

Constraints:
1 <= n <= 105\

-->> java solution

class Solution {
    String binaryNextNumber(String s){
        int i; String ans; StringBuilder ss = new StringBuilder();
        for(i=s.length()-1;i>=0;i--) if(s.charAt(i) == '0') break;

        for(int j=0;j<s.length()-1-i;j++) ss.append("0");
        if(i >= 0){
            ans = s.substring(0,i) + "1" + ss;
        }
        else ans = "1" + ss;

        i = 0;
        for(i=0;i<ans.length();i++) if(ans.charAt(i) == '1') break;

        return ans.substring(i);
    }
}

