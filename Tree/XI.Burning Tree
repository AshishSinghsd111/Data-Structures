//this is a gfg potd for 20th august 2024.
//difficulty - hard
Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.


Examples : 

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5

Expected Time Complexity: O(number of nodes)
Expected Auxiliary Space: O(height of tree)


Constraints:
1 ≤ number of nodes ≤ 105

1 ≤ values of nodes ≤ 105

-->> java solution

static Map<Integer,List<Integer>> map = new HashMap<>();
    static Node TargetNode = null;
    public static int minTime(Node root, int target) 
    {
        
      //  findtargetNode(root,target);
        constructMap(root,null);
        return calTime(target);
    }
    
    public static int calTime(int target){
        
        int time = 0;
        
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        
        queue.add(target);
        visited.add(target);
        
        while(!queue.isEmpty()){
            int n = queue.size();
            
            for(int i=0;i<n;i++){
                int dequeued = queue.poll();
                
                for(int elems : map.get(dequeued)){
                    if(visited.contains(elems)){
                        continue;
                    }
                    queue.add(elems);
                    visited.add(elems);
                }
            }
            time++;
        }
        
        return time-1;
        
    }
    public static void constructMap(Node root,Node parent){
        if(root==null){
            return ;
        }
        else{
            map.put(root.data,new ArrayList<>());
            if(parent!=null){
                map.get(parent.data).add(root.data);
                map.get(root.data).add(parent.data);
            }
            constructMap(root.left,root);
            constructMap(root.right,root);
        }
    }
